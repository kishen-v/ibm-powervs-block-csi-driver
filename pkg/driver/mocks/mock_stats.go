// Code generated by MockGen. DO NOT EDIT.
// Source: sigs.k8s.io/ibm-powervs-block-csi-driver/pkg/driver (interfaces: StatsUtils)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	"go.uber.org/mock/gomock"
)

// MockStatsUtils is a mock of StatsUtils interface.
type MockStatsUtils struct {
	ctrl     *gomock.Controller
	recorder *MockStatsUtilsMockRecorder
}

// MockStatsUtilsMockRecorder is the mock recorder for MockStatsUtils.
type MockStatsUtilsMockRecorder struct {
	mock *MockStatsUtils
}

// NewMockStatsUtils creates a new mock instance.
func NewMockStatsUtils(ctrl *gomock.Controller) *MockStatsUtils {
	mock := &MockStatsUtils{ctrl: ctrl}
	mock.recorder = &MockStatsUtilsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatsUtils) EXPECT() *MockStatsUtilsMockRecorder {
	return m.recorder
}

// DeviceInfo mocks base method.
func (m *MockStatsUtils) DeviceInfo(arg0 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeviceInfo", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeviceInfo indicates an expected call of DeviceInfo.
func (mr *MockStatsUtilsMockRecorder) DeviceInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceInfo", reflect.TypeOf((*MockStatsUtils)(nil).DeviceInfo), arg0)
}

// FSInfo mocks base method.
func (m *MockStatsUtils) FSInfo(arg0 string) (int64, int64, int64, int64, int64, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FSInfo", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(int64)
	ret3, _ := ret[3].(int64)
	ret4, _ := ret[4].(int64)
	ret5, _ := ret[5].(int64)
	ret6, _ := ret[6].(error)
	return ret0, ret1, ret2, ret3, ret4, ret5, ret6
}

// FSInfo indicates an expected call of FSInfo.
func (mr *MockStatsUtilsMockRecorder) FSInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FSInfo", reflect.TypeOf((*MockStatsUtils)(nil).FSInfo), arg0)
}

// IsBlockDevice mocks base method.
func (m *MockStatsUtils) IsBlockDevice(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBlockDevice", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsBlockDevice indicates an expected call of IsBlockDevice.
func (mr *MockStatsUtilsMockRecorder) IsBlockDevice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBlockDevice", reflect.TypeOf((*MockStatsUtils)(nil).IsBlockDevice), arg0)
}

// IsPathNotExist mocks base method.
func (m *MockStatsUtils) IsPathNotExist(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPathNotExist", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPathNotExist indicates an expected call of IsPathNotExist.
func (mr *MockStatsUtilsMockRecorder) IsPathNotExist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPathNotExist", reflect.TypeOf((*MockStatsUtils)(nil).IsPathNotExist), arg0)
}
